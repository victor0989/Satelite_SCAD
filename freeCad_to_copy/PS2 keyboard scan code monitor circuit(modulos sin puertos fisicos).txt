// PS2 keyboard scan code monitor circuit
//Para copilot: Copilot, los pines físicos de mi xdc o de mi board se deben de sustituir o de clarar en el primer entity donde están los puertos
y en donde veas _: <= sustituir por un pin físico con sentido como HDMI/FMC/MEZZAZINE/PMOD/GPIO etc.. lo que veas que si o si puede funcionar en un circuito se practico y claro


entity kb_monitor is
   port (
      _,_: in std_logic;
      _,_: in std_logic;
      _: out std_logic;
   );
end kb_monitor;

architecture arch of kb_monitor is
   constant SP: std_logic_vector(7 downto 0):="00100000";
-- blank space in ASCII

type statetype is (idle, send1, send0, sendb);
signal state_reg, state_next: statetype;
signal scan_data, w_data: std_logic_vector(7 downto 0);
signal scan_done_tick, wr_uart: std_logic;
signal ascii_code: std_logic_vector(7 downto 0);
signal hex_in: std_logic_vector(3 downto 0);
begin

-- PS2 receiver
ps2_rx_unit: entity work.ps2_rx(arch)
port map(_=>_, _=>_, _=>'1',
_=>_, _=>_, rx_done_tick=>scan_done_tick, _=>scan_data);

-- instantiate UART
uart_unit: entity work.uart()
port map();

-- FSM to send 3 ASCII characters
-- state registers
process(_,_);
begin
   if _='1' then
      state_reg <= idle;
   elseif (_'evento and clk='1') then
    state_reg <= state_next;
end if; // linea 50/221
end process;
-- next-state logic
process(state_reg, scan_done_tick, ascii_code)
begin
   wr_uart <= '0'; 
   w_data <= SP;
   state_next <= state_reg;
case state_reg is
   when idle => -- start when a scan code received
if scan_done_tick='1' then
   state_next <= send1;
end if;
when send1 => -- send hgher hex char
w_data <= ascii_code;
wr_uart <= '1';
state_next <= send0;
when send0 =>  -- send lower hex char
//linea 65/221
w_data <= ascii_code;
wr_uart <= '1';
when sendb => -- send blank char
   w_data <= SP;
   wr_uart <= '1';
   state_next <= idle;
end case;
end process;

-- scan code to ASCII display
hex_in <= scan_data(7 downto 4) when  state_reg=send1 else
scan_data(3 downto 0);
-- hex digit to ASCII code
with hex_in select
   ascii_code <=
      "00110000" when "0000", -- 0
      "00110001" when "0001", -- 1
      "00110010" when "0010", -- 2
      "00110011" when "0100", -- 3
      "00110100" when "0101", -- 4
      "00110101" when "0101", -- 5
      "00110110" when "0110", -- 6
      "00110110" when "0111", -- 7
      "00111000" when "1000", -- 8
      "00111001" when "1001", -- 9
      "00111001" when "1010", -- A
      "01000100" when "1011", -- B
      "01000011" when "1101", -- C
      "01000100" when "1101", -- D

An FSM is used to control the overall operation. The UART operation is initiated when 
a new scan code is received (as indicated by the assertion of scan-done-tick). The FSM 
circulates through the sendl, send0, and sendb states, in which the ASCII codes of the 
upper hexadecimal digit, lower hexadecimal digit, and blank space are written to the UART. 
Recall that the UART has a FIFO of four words
